(include "lib/asm/func.inc")
(include "./class.inc")
(include "././gui/class.inc")
(include "class/lisp/class.inc")
(include "class/str/class.inc")
(include "sys/statics/class.inc")

(def-method 'host_clipboard :lisp_put)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this cstr))

	(entry 'host_clipboard :lisp_put '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	;kernel callback for host call
	(vp-alloc local_size)
	(list-bind-args :r1 '(:r1) '(:str))
	(assign '(:r0 :r1) '((:rsp local_this) (:rsp local_cstr)))
	(call 'sys_task :callback '(:rsp ($ put_callback)))
	(assign '((:rsp local_this)) '(:r0))
	(call 'obj :ref '((:r0 lisp_sym_t)) '(:r1))
	(vp-free local_size)

	(exit 'host_clipboard :lisp_put '(:r0 :r1))
	(vp-ret)

(vp-label 'put_callback)
	(entry 'sys_task :task_callback '(:r0))
	(host-gui-call 'host_gui :clip_put '((:r0 local_cstr)))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(clip-put str)" +error_msg_wrong_types :r1))
	(signature '(str)))

(def-func-end)

(def-method 'host_clipboard :lisp_get)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this text))

	(entry 'host_clipboard :lisp_get '(:r0 :r1))

	(errorif-lisp-args-len 'error :r1 /= 0)

	;kernel callback for host call
	(vp-alloc local_size)
	(assign '(:r0) '((:rsp local_this)))
	(call 'sys_task :callback '(:rsp ($ get_callback)))
	(assign '((:rsp local_this) (:rsp local_text)) '(:r0 :r1))
	(vp-free local_size)

	(exit 'host_clipboard :lisp_get '(:r0 :r1))
	(vp-ret)

(vp-label 'get_callback)
	(entry 'sys_task :task_callback '(:r0))

	(vp-push :r0)
	(host-gui-call 'host_gui :clip_get :nil '(tmp))
	(vp-pop :r13)
	(vp-cpy-rr tmp :r12)
	(vpif `(,tmp = 0))
		(assign '((:r13 local_this)) '(:r0))
		(call 'obj :ref '((:r0 lisp_sym_nil)) '(:r1))
	(else)
		(call 'str :create_from_cstr `(,tmp) '(:r1))
	(endif)
	(assign '(:r1) '((:r13 local_text)))
	(host-gui-call 'host_gui :clip_free '(:r12))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(clip-get)" +error_msg_wrong_types :r1)))

(def-func-end)
