(include "lib/asm/func.inc")
(include "././num/class.inc")
(include "././sym/class.inc")
(include "././sstream/class.inc")
(include "././lisp/class.inc")
(include "sys/str/class.inc")
(include "././fixed/class.inc")

(def-method 'str :lisp_code)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (this args len value iter_begin width index) '(:r6 :r7 :r8))

	(entry 'str :lisp_code (list this args))

	(errorif-lisp-args-sig 'error1 :r1 1 3)

	(assign `((,args array_length)) `(,len))
	(assign `((,args array_begin) 1) `(,iter_begin ,width))
	(vp-xor-rr index index)
	(vp-cpy-ir iter_begin 0 value)
	(vpif `(,len > 1))
		(vp-cpy-ir iter_begin +ptr_size width)
		(assign `((,width num_value)) `(,width))
		(vp-sub-cr 1 width)
		(vp-and-cr (dec +long_size) width)
		(vp-add-cr 1 width)
	(endif)
	(vpif `(,len > 2))
		(vp-cpy-ir iter_begin (* 2 +ptr_size) index)
		(assign `((,index num_value)) `(,index))
	(endif)

	(vp-cpy-ir-ui value str_length len)
	(vpif `(,index < 0))
		(vp-add-rr len index)
		(vp-add-cr 1 index)
	(endif)

(errorcase
	(gotoif `(,index < 0) 'error1)
	(vp-sub-rr width len)
	(gotoif `(,index > ,len) 'error1))

	(vp-add-cr str_data value)
	(vp-xor-rr len len)
	(vp-add-rr index value)
	(vp-push len)
	(call 'sys_mem :copy (list value :rsp width))
	(vp-pop value)
	(call 'num :create (list value) (list value))

	(exit 'str :lisp_code (list this value))
	(vp-ret)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error (list this "(code str [width idx])" +error_msg_wrong_types args))
	(signature '(str num num)))

(def-func-end)

(def-method 'str :lisp_char)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (this args len value iter_begin iter_end width) '(:r8 :r9 :r10))

	(entry 'str :lisp_char (list this args))

	(assign `((,args array_length)) `(,len))

(errorcase
	(gotoif `(,len > 2) 'error1)
	(call 'lisp :env_args_type `(,args (@ ,(f-path 'num :vtable)) 1) '(tmp))
	(gotoif `(,tmp = 0) 'error1))

	(assign `((,args array_begin) 1) `(,iter_begin ,width))
	(vp-cpy-ir iter_begin 0 value)
	(vpif `(,len > 1))
		(vp-cpy-ir iter_begin +ptr_size width)
		(assign `((,width num_value)) `(,width))
		(vp-sub-cr 1 width)
		(vp-and-cr (dec +long_size) width)
		(vp-add-cr 1 width)
	(endif)
	(call 'str :create_from_buffer (list (list '& value num_value) width) (list value))

	(exit 'str :lisp_char (list this value))
	(vp-ret)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error (list this "(char num [width])" +error_msg_wrong_types args)))

(def-func-end)

(def-method 'str :lisp_cmp)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'str :lisp_cmp '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2)

	(vp-cpy-rr :r0 :r13)
	(defq in (method-input 'str :compare))
	(array-bind-args :r1 in)
	(call 'str :compare in '(_ :r1))
	(call 'num :create '(:r1) '(:r0))

	(exit 'str :lisp_cmp '(:r13 :r0))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(cmp str str)" +error_msg_wrong_types :r1))
	(signature '(str str)))

(def-func-end)

(def-method 'str :lisp_save)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'str :lisp_save '(:r0 :r1))

	(errorif-lisp-args-sig 'error1 :r1 2)

	(vp-cpy-rr :r0 :r12)
	(vp-cpy-rr :r1 :r13)
	(array-bind-args :r1 '(:r11 :r0))
	(call 'host_os :pii_open '((& :r0 str_data) +file_open_write) '(:r0))
	(errorif '(:r0 < 3) 'error2)
	(vp-cpy-rr :r0 :r10)
	(call 'host_os :pii_write '(:r0 (& :r11 str_data) (:r11 str_length)))
	(call 'host_os :pii_close '(:r10))
	(class/obj/ref :r11 :r2)
	(call 'sys_task :sleep '(0))

	(exit 'str :lisp_save '(:r12 :r11))
	(vp-ret)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error '(:r0 "(save str path)" +error_msg_wrong_types :r1))
(vp-label 'error2)
	(jump 'lisp :repl_error '(:r12 "(save str path)" +error_msg_open_error :r13))
	(signature '(str str)))

(def-func-end)

(def-method 'str :lisp_load)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'str :lisp_load '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-cpy-rr :r0 :r13)
	(defq in (method-input 'str :create_from_file))
	(list-bind-args :r1 in '(:str))
	(call 'str :create_from_file in '(:r0))
	(vpif '(:r0 = 0))
		(call 'obj :ref '((:r13 lisp_sym_nil)) '(:r0))
	(endif)

	(exit 'str :lisp_load '(:r13 :r0))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(load path)" +error_msg_wrong_types :r1))
	(signature '(str)))

(def-func-end)

(def-method 'str :lisp_str)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-struct local 0
		(ptr this stream)
		(pptr iter_begin iter_end))

	(vp-alloc local_size)
	(entry 'str :lisp_str '(:r0 :r1))

	(class/array/get_both :r1 :r1 :r2)
	(assign '(:r0 :r1 :r2) '((:rsp local_this) (:rsp local_iter_begin) (:rsp local_iter_end)))
	(call 'str :create_from_buffer '(0 str_gap) '(:r0))
	(call 'sstream :create '(:r0) '((:rsp local_stream)))
	(assign '((:rsp local_iter_begin) (:rsp local_iter_end)) '(:r1 :r2))
	(loop-while '(:r1 /= :r2))
		(vp-cpy-ir :r1 0 :r2)
		(assign '((:r2 obj_vtable)) '(:r1))
		(f-bind 'str :vtable :r4)
		(f-bind 'sstream :vtable :r3)
		(switch)
		(vpcase '(:r1 = :r4))
			(call 'stream :write '((:rsp local_stream) (& :r2 str_data) (:r2 str_length)))
			(break)
		(vpcase '(:r1 = :r3))
			(assign '((:r2 stream_object) (:r2 stream_bufp)) '(:r1 :r2))
			(vp-add-cr str_data :r1)
			(vp-sub-rr :r1 :r2)
			(call 'stream :write '((:rsp local_stream) :r1 :r2))
		(else)
			(call 'lisp :repl_print '((:rsp local_this) (:rsp local_stream) :r2))
		(endswitch)
		(assign '((:rsp local_iter_begin) (:rsp local_iter_end)) '(:r1 :r2))
		(vp-add-cr +ptr_size :r1)
		(assign '(:r1) '((:rsp local_iter_begin)))
	(loop-end)
	(call 'sstream :ref_string '((:rsp local_stream)) '(:r0 (:rsp local_stream)))
	(call 'obj :destroy '(:r0))

	(exit 'str :lisp_str '((:rsp local_this) (:rsp local_stream)))
	(vp-free local_size)
	(vp-ret)

(def-func-end)

(def-method 'str :lisp_create)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'str :lisp_create '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-push :r0)
	(list-bind-args :r1 '(:r1) '(:num))
	(call 'str :create_from_buffer '(0 :r1) '(:r1))
	(vp-pop :r0)

	(exit 'str :lisp_create '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(str-alloc size)" +error_msg_wrong_types :r1))
	(signature '(num)))

(def-func-end)

(def-method 'str :lisp_expand)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (div out rem in tab_width iter_begin iter_end iter_out len cursor ch sp flag))

	(entry 'str :lisp_expand '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2)

	(list-bind-args :r1 `(,in ,tab_width) '(:obj :num))
	(errorif `(,tab_width <= 0) 'error)

	(vp-push :r0)
	(assign `((,in str_length)) `(,len))
	(gotoif `(,len = 0) 'same)
	(assign `((& ,in str_data)) `(,iter_begin))
	(assign `((& ,iter_begin ,len)) `(,iter_end))
	(vp-xor-rr iter_out iter_out)
	(vp-push iter_begin iter_end)
	(vp-call 'expand)
	(vpif `(,flag /= 0))
		(call 'str :create_from_buffer `(0 ,cursor) `(,out))
		(vp-pop iter_begin iter_end)
		(assign `((& ,out str_data)) `(,iter_out))
		(vp-call 'expand)
	(else)
		(vp-pop iter_begin iter_end)
	(vp-label 'same)
		(assign `(,in) `(,out))
		(class/obj/ref out :r0)
	(endif)
	(vp-pop :r0)

	(exit 'str :lisp_expand '(:r0 :r1))
	(vp-ret)

(vp-label 'expand)
	(vp-xor-rr cursor cursor)
	(vp-xor-rr flag flag)
	(vp-cpy-cr 32 sp)
	(loop-start)
		(assign `((,iter_begin 0 ub)) `(,ch))
		(vp-add-cr +byte_size iter_begin)
		(vpif `(,ch = 9))
			(vp-xor-rr rem rem)
			(vp-cpy-rr cursor div)
			(vp-div-rrr-u tab_width rem div)
			(vp-cpy-cr 1 flag)
			(vp-cpy-rr tab_width len)
			(vp-sub-rr rem len)
			(vp-add-rr len cursor)
			(vpif `(,iter_out /= 0))
				(loop-start)
					(vp-sub-cr +byte_size len)
					(assign `(,sp) `((,iter_out 0 ub)))
					(vp-add-cr +byte_size iter_out)
				(loop-until `(,len = 0))
			(endif)
		(else)
			(vp-add-cr 1 cursor)
			(vpif `(,iter_out /= 0))
				(assign `(,ch) `((,iter_out 0 ub)))
				(vp-add-cr +byte_size iter_out)
			(endif)
		(endif)
	(loop-until `(,iter_begin = ,iter_end))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(expand str tab_width)" +error_msg_wrong_types :r1))
	(signature '(str num)))

(def-func-end)

(def-method 'str :lisp_to_num)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'str :lisp_to_num '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(vp-push :r0)
	(defq in (method-input 'sys_str :to_num)
		out (method-output 'sys_str :to_num))
	(list-bind-args :r1 in '(:str))
	(call 'sys_str :to_num in out)
	(vpif (list (second out) '= 0))
		(call 'num :create (list (first out)) '(:r1))
	(else)
		(call 'fixed :create (list (first out)) '(:r1))
	(endif)
	(vp-pop :r0)

	(exit 'str :lisp_to_num '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(str-to-num str)" +error_msg_wrong_types :r1))
	(signature '(str)))

(def-func-end)

(def-method 'str :lisp_bfind)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (this args))

	(entry 'str :lisp_bfind `(,this ,args))

	(errorif-lisp-args-sig 'error :r1 2)
	(vp-push this)
	(list-bind-args args `(,args ,this) '(:char :obj))
	(call 'str :bfind `(,this ,args) '(_ _ tmp))
	(vpif `(,tmp = -1))
		(assign '((:rsp 0)) `(,args))
		(assign `((,args lisp_sym_nil)) `(,args))
		(class/obj/ref args this)
	(else)
		(call 'num :create `(,tmp) `(,args))
	(endif)
	(vp-pop this)

	(exit 'str :lisp_bfind `(,this ,args))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error `(,this "(bfind char cls)" +error_msg_wrong_types ,args))
	(signature '(str str)))

(def-func-end)

(def-method 'str :lisp_bskip)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (src len idx this args) '(:r7 :r8 :r9))

	(entry 'str :lisp_bskip `(,this ,args))

	(vp-push this)
	(errorif-lisp-args-sig 'error :r1 3)
	(list-bind-args args `(,this ,src ,idx) '(:obj :obj :num))
	(assign `((,src str_length)) `(,len))
	(lisp-elem-index idx len)
	(errorcase
		(gotoif `(,idx < 0) 'error)
		(gotoif `(,idx > ,len) 'error))
	(vpif `(,idx /= ,len))
		(assign `((& ,src str_data)) `(,src))
		(loop-start)
			(call 'str :bfind `(,this (,src ,idx ub)) `(,this _ tmp))
			(breakif `(,tmp = -1))
			(vp-add-cr 1 idx)
		(loop-until `(,idx = ,len))
	(endif)
	(call 'num :create `(,idx) `(,args))
	(vp-pop this)

	(exit 'str :lisp_bskip `(,this ,args))
	(vp-ret)

(errorcase
(vp-label 'error)
	(vp-pop this)
	(jump 'lisp :repl_error `(,this "(bskip cls str idx)" +error_msg_wrong_types ,args))
	(signature '(str str num)))

(def-func-end)

(def-method 'str :lisp_bskipn)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (src len idx this args) '(:r7 :r8 :r9))

	(entry 'str :lisp_bskipn `(,this ,args))

	(vp-push this)
	(errorif-lisp-args-sig 'error :r1 3)
	(list-bind-args args `(,this ,src ,idx) '(:obj :obj :num))
	(assign `((,src str_length)) `(,len))
	(lisp-elem-index idx len)
	(errorcase
		(gotoif `(,idx < 0) 'error)
		(gotoif `(,idx > ,len) 'error))
	(vpif `(,idx /= ,len))
		(assign `((& ,src str_data)) `(,src))
		(loop-start)
			(call 'str :bfind `(,this (,src ,idx ub)) `(,this _ tmp))
			(breakif `(,tmp /= -1))
			(vp-add-cr 1 idx)
		(loop-until `(,idx = ,len))
	(endif)
	(call 'num :create `(,idx) `(,args))
	(vp-pop this)

	(exit 'str :lisp_bskipn `(,this ,args))
	(vp-ret)

(errorcase
(vp-label 'error)
	(vp-pop this)
	(jump 'lisp :repl_error `(,this "(bskipn cls str idx)" +error_msg_wrong_types ,args))
	(signature '(str str num)))

(def-func-end)

(def-method 'str :lisp_rbskip)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (src len idx this args) '(:r7 :r8 :r9))

	(entry 'str :lisp_rbskip `(,this ,args))

	(vp-push this)
	(errorif-lisp-args-sig 'error :r1 3)
	(list-bind-args args `(,this ,src ,idx) '(:obj :obj :num))
	(assign `((,src str_length)) `(,len))
	(lisp-elem-index idx len)
	(errorcase
		(gotoif `(,idx < 0) 'error)
		(gotoif `(,idx > ,len) 'error))
	(vpif `(,idx /= 0))
		(assign `((& ,src ,(dec str_data))) `(,src))
		(loop-start)
			(call 'str :bfind `(,this (,src ,idx ub)) `(,this _ tmp))
			(breakif `(,tmp = -1))
			(vp-sub-cr 1 idx)
		(loop-until `(,idx = 0))
	(endif)
	(call 'num :create `(,idx) `(,args))
	(vp-pop this)

	(exit 'str :lisp_rbskip `(,this ,args))
	(vp-ret)

(errorcase
(vp-label 'error)
	(vp-pop this)
	(jump 'lisp :repl_error `(,this "(rbskip cls str idx)" +error_msg_wrong_types ,args))
	(signature '(str str num)))

(def-func-end)

(def-method 'str :lisp_rbskipn)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (src len idx this args) '(:r7 :r8 :r9))

	(entry 'str :lisp_rbskipn `(,this ,args))

	(vp-push this)
	(errorif-lisp-args-sig 'error :r1 3)
	(list-bind-args args `(,this ,src ,idx) '(:obj :obj :num))
	(assign `((,src str_length)) `(,len))
	(lisp-elem-index idx len)
	(errorcase
		(gotoif `(,idx < 0) 'error)
		(gotoif `(,idx > ,len) 'error))
	(vpif `(,idx /= 0))
		(assign `((& ,src ,(dec str_data))) `(,src))
		(loop-start)
			(call 'str :bfind `(,this (,src ,idx ub)) `(,this _ tmp))
			(breakif `(,tmp /= -1))
			(vp-sub-cr 1 idx)
		(loop-until `(,idx = 0))
	(endif)
	(call 'num :create `(,idx) `(,args))
	(vp-pop this)

	(exit 'str :lisp_rbskipn `(,this ,args))
	(vp-ret)

(errorcase
(vp-label 'error)
	(vp-pop this)
	(jump 'lisp :repl_error `(,this "(rbskipn cls str idx)" +error_msg_wrong_types ,args))
	(signature '(str str num)))

(def-func-end)
