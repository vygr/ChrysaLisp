(include "lib/asm/func.inc")
(include "./class.inc")
(include "././num/class.inc")
(include "././str/class.inc")
(include "././lisp/class.inc")

(def-method 'seq :lisp_length)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_length '(:r0 :r1))

	(errorif-lisp-args-sig 'error1 :r1 1)

	(vp-cpy-rr :r0 :r13)
	(defq in (method-input 'seq :get_length))
	(list-bind-args :r1 in '(:seq))
	(call 'seq :get_length in '(_ len))
	(call 'num :create `(,len) '(:r1))

	(exit 'seq :lisp_length '(:r13 :r1))
	(vp-ret)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error '(:r0 "(length seq)" +error_msg_wrong_types :r1))
	(signature '(seq)))

(def-func-end)

(def-method 'seq :lisp_elem)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_elem '(:r0 :r1))

	(errorif-lisp-args-sig 'error1 :r1 2)
(errorcase
	(assign '(:r1) '(:r13)))

	(assign '(:r0) '(:r12))
	(list-bind-args :r1 '(:r0 :r11) '(:seq :num))
	(call 'seq :get_length '(:r0) '(:r0 :r1))
	(lisp-elem-index :r11 :r1)
(errorcase
	(gotoif '(:r11 < 0) 'error2)
	(gotoif '(:r11 >= :r1) 'error2))
	(call 'seq :ref_elem '(:r0 :r11) '(_ :r1))

	(exit 'seq :lisp_elem '(:r12 :r1))
	(vp-ret)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error '(:r0 "(elem-get seq idx)" +error_msg_wrong_types :r1))
(vp-label 'error2)
	(jump 'lisp :repl_error '(:r12 "(elem-get seq idx)" +error_msg_not_valid_index :r13))
	(signature '(seq num)))

(def-func-end)

(def-method 'seq :lisp_slice)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_slice '(:r0 :r1))

	(errorif-lisp-args-sig 'error1 :r1 3)
(errorcase
	(assign '(:r1) '(:r13)))

	(assign '(:r0) '(:r12))
	(list-bind-args :r1 '(:r0 :r10 :r11) '(:seq :num :num))
	(call 'seq :get_length '(:r0) '(:r0 :r1))
	(lisp-elem-index :r10 :r1)
	(lisp-elem-index :r11 :r1)
	(vpif '(:r10 <= :r11))
	(errorcase
		(gotoif '(:r10 < 0) 'error2)
		(gotoif '(:r11 > :r1) 'error2))
		(call 'seq :slice '(:r0 :r10 :r11) '(_ :r1))
	(else)
	(errorcase
		(gotoif '(:r11 < 0) 'error2)
		(gotoif '(:r10 > :r1) 'error2))
		(call 'seq :rslice '(:r0 :r11 :r10) '(_ :r1))
	(endif)

	(exit 'seq :lisp_slice '(:r12 :r1))
	(vp-ret)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error '(:r0 "(slice seq start end)" +error_msg_wrong_types :r1))
(vp-label 'error2)
	(jump 'lisp :repl_error '(:r12 "(slice seq start end)" +error_msg_not_valid_index :r13))
	(signature '(seq num num)))

(def-func-end)

(def-method 'seq :lisp_cat)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_cat '(:r0 :r1))

(errorcase
	(call 'lisp :env_args_type `(:r1 (@ ,(f-path 'str :vtable)) 1) '(tmp))
	(vpif `(,tmp = 0))
		(call 'lisp :env_args_match `(:r1 (@ ,(f-path 'seq :vtable)) 1) '(tmp))
		(gotoif `(,tmp = 0) 'error)
	(endif))

	(assign '(:r0) '(:r13))
	(array-bind-args :r1 '(:r0))
	(call 'seq :cat '(:r0 :r1) '(:r0))

	(exit 'seq :lisp_cat '(:r13 :r0))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(cat seq ...)" +error_msg_wrong_types :r1)))

(def-func-end)

(def-method 'seq :lisp_find)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (element sequence idx vtable ovtable args)
		'(:r8 :r9 :r10 :r11 :r12 :r13))

	(entry 'seq :lisp_find '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2 3)

	(assign '((:r1 array_length)) '(:r2))
	(vp-cpy-rr :r1 args)
	(vp-push :r0)
	(vpif '(:r2 = 3))
		(list-bind-args :r1 `(,element ,sequence ,idx) '(:obj :seq :num))
	(else)
		(list-bind-args :r1 `(,element ,sequence) '(:obj :seq))
		(vp-cpy-cr 0 idx)
	(endif)
	(assign `((,sequence obj_vtable)) `(,ovtable))
	(switch)
	(f-bind 'str :vtable vtable)
	(vpcase `(,ovtable = ,vtable))
	(errorcase
		(assign `((,element obj_vtable)) `(,ovtable))
		(gotoif `(,ovtable /= ,vtable) 'error1))
		(list-cast-args `(,element) '(:char))
		(goto 'dofind)
	(default)
		(f-bind 'list :vtable vtable)
		(gotoif `(,ovtable = ,vtable) 'dofind)
	(errorcase
		(call 'obj :inst_of `(,element (@ ,(f-path 'num :vtable))) '(_ tmp))
		(gotoif `(,tmp = 0) 'error1))
		(list-cast-args `(,element) '(:num))
	(vp-label 'dofind)
		(call 'seq :get_length `(,sequence) '(:r0 :r1))
		(gotoif '(:r1 = 0) 'empty)
		(lisp-elem-index idx :r1)
	(errorcase
		(gotoif `(,idx < 0) 'error2)
		(gotoif `(,idx > :r1) 'error2))
		(call 'seq :find `(:r0 ,element ,idx) '(_ _ idx))
		(vpif `(,idx = -1))
		(vp-label 'empty)
			(assign '((:rsp 0)) '(:r0))
			(call 'obj :ref '((:r0 lisp_sym_nil)) '(:r0))
		(else)
			(call 'num :create `(,idx) '(:r0))
		(endif)
	(endswitch)
	(vp-cpy-rr :r0 :r1)
	(vp-pop :r0)

	(exit 'seq :lisp_find '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error2)
	(vp-pop :r0)
	(jump 'lisp :repl_error `(:r0 "(find elem seq [idx])" +error_msg_not_valid_index ,args))
(vp-label 'error1)
	(vp-pop :r0)
	(vp-cpy-rr args :r1)
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(find elem seq [idx])" +error_msg_wrong_types :r1))
	(signature '(obj seq num)))

(def-func-end)

(def-method 'seq :lisp_rfind)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (element sequence idx vtable ovtable args)
		'(:r8 :r9 :r10 :r11 :r12 :r13))

	(entry 'seq :lisp_rfind '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 2 3)

	(assign '((:r1 array_length)) '(:r2))
	(vp-cpy-rr :r1 args)
	(vp-push :r0)
	(vpif '(:r2 = 3))
		(list-bind-args :r1 `(,element ,sequence ,idx) '(:obj :seq :num))
	(else)
		(list-bind-args :r1 `(,element ,sequence) '(:obj :seq))
		(vp-cpy-cr -1 idx)
	(endif)
	(assign `((,sequence obj_vtable)) `(,ovtable))
	(switch)
	(f-bind 'str :vtable vtable)
	(vpcase `(,ovtable = ,vtable))
	(errorcase
		(assign `((,element obj_vtable)) `(,ovtable))
		(gotoif `(,ovtable /= ,vtable) 'error1))
		(list-cast-args `(,element) '(:char))
		(goto 'dofind)
	(default)
		(f-bind 'list :vtable vtable)
		(gotoif `(,ovtable = ,vtable) 'dofind)
	(errorcase
		(call 'obj :inst_of `(,element (@ ,(f-path 'num :vtable))) '(_ tmp))
		(gotoif `(,tmp = 0) 'error1))
		(list-cast-args `(,element) '(:num))
	(vp-label 'dofind)
		(call 'seq :get_length `(,sequence) '(:r0 :r1))
		(gotoif '(:r1 = 0) 'empty)
		(lisp-elem-index idx :r1)
	(errorcase
		(gotoif `(,idx < 0) 'error2)
		(gotoif `(,idx > :r1) 'error2))
		(call 'seq :rfind `(:r0 ,element ,idx) '(_ _ idx))
		(vpif `(,idx = 0))
		(vp-label 'empty)
			(assign '((:rsp 0)) '(:r0))
			(call 'obj :ref '((:r0 lisp_sym_nil)) '(:r0))
		(else)
			(call 'num :create `(,idx) '(:r0))
		(endif)
	(endswitch)
	(vp-cpy-rr :r0 :r1)
	(vp-pop :r0)

	(exit 'seq :lisp_rfind '(:r0 :r1))
	(vp-ret)

(errorcase
(vp-label 'error2)
	(vp-pop :r0)
	(jump 'lisp :repl_error `(:r0 "(rfind elem seq [idx])" +error_msg_not_valid_index ,args))
(vp-label 'error1)
	(vp-pop :r0)
	(vp-cpy-rr args :r1)
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(rfind elem seq [idx])" +error_msg_wrong_types :r1))
	(signature '(obj seq num)))

(def-func-end)

(def-method 'seq :lisp_first)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_first '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(assign '(:r0) '(:r13))
	(list-bind-args :r1 '(:r0) '(:seq))
	(call 'seq :get_length '(:r0) '(:r0 :r1))
	(vpif '(:r1 > 0))
		(call 'seq :ref_elem '(:r0 0) '(_ :r1))
	(else)
		(assign '((:r13 lisp_sym_nil)) '(:r1))
		(class/obj/ref :r1 :r2)
	(endif)

	(exit 'seq :lisp_first '(:r13 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(first seq)" +error_msg_not_a_sequence :r1))
	(signature '(seq)))

(def-func-end)

(def-method 'seq :lisp_second)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_second '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(assign '(:r0) '(:r13))
	(list-bind-args :r1 '(:r0) '(:seq))
	(call 'seq :get_length '(:r0) '(:r0 :r1))
	(vpif '(:r1 > 1))
		(call 'seq :ref_elem '(:r0 1) '(_ :r1))
	(else)
		(assign '((:r13 lisp_sym_nil)) '(:r1))
		(class/obj/ref :r1 :r2)
	(endif)

	(exit 'seq :lisp_second '(:r13 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(second seq)" +error_msg_not_a_sequence :r1))
	(signature '(seq)))

(def-func-end)

(def-method 'seq :lisp_third)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_third '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(assign '(:r0) '(:r13))
	(list-bind-args :r1 '(:r0) '(:seq))
	(call 'seq :get_length '(:r0) '(:r0 :r1))
	(vpif '(:r1 > 2))
		(call 'seq :ref_elem '(:r0 2) '(_ :r1))
	(else)
		(assign '((:r13 lisp_sym_nil)) '(:r1))
		(class/obj/ref :r1 :r2)
	(endif)

	(exit 'seq :lisp_third '(:r13 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(third seq)" +error_msg_not_a_sequence :r1))
	(signature '(seq)))

(def-func-end)

(def-method 'seq :lisp_last)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_last '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(assign '(:r0) '(:r13))
	(list-bind-args :r1 '(:r0) '(:seq))
	(call 'seq :get_length '(:r0) '(:r0 :r1))
	(vpif '(:r1 > 0))
		(call 'seq :ref_elem '(:r0 (& :r1 -1)) '(_ :r1))
	(else)
		(assign '((:r13 lisp_sym_nil)) '(:r1))
		(class/obj/ref :r1 :r2)
	(endif)

	(exit 'seq :lisp_last '(:r13 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(last seq)" +error_msg_not_a_sequence :r1))
	(signature '(seq)))

(def-func-end)

(def-method 'seq :lisp_rest)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_rest '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(assign '(:r0) '(:r13))
	(list-bind-args :r1 '(:r0) '(:seq))
	(call 'seq :get_length '(:r0) '(:r0 :r2))
	(vp-cpy-cr 1 :r1)
	(vpif '(:r2 = 0))
		(vp-cpy-rr :r2 :r1)
	(endif)
	(call 'seq :slice '(:r0 :r1 :r2) '(_ :r1))

	(exit 'seq :lisp_rest '(:r13 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(rest seq)" +error_msg_not_a_sequence :r1))
	(signature '(seq)))

(def-func-end)

(def-method 'seq :lisp_most)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_most '(:r0 :r1))

	(errorif-lisp-args-sig 'error :r1 1)

	(assign '(:r0) '(:r13))
	(list-bind-args :r1 '(:r0) '(:seq))
	(call 'seq :get_length '(:r0) '(:r0 :r2))
	(vp-sub-cr 1 :r2)
	(vp-xor-rr :r1 :r1)
	(vpif '(:r2 < 0))
		(vp-cpy-rr :r1 :r2)
	(endif)
	(call 'seq :slice '(:r0 :r1 :r2) '(_ :r1))

	(exit 'seq :lisp_most '(:r13 :r1))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error '(:r0 "(most seq)" +error_msg_not_a_sequence :r1))
	(signature '(seq)))

(def-func-end)

(def-method 'seq :lisp_partition)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(vp-def (seq cnt idx len lst this args idx1)
		'(:r13 :r12 :r11 :r10 :r9 :r0 :r1 :r2))

	(entry 'seq :lisp_partition `(,this ,args))

	(errorif-lisp-args-sig 'error :r1 1 2)

	(assign `((,args array_length)) `(,len))
	(vpif `(,len = 1))
		(list-bind-args args `(,seq) '(:seq))
		(vp-cpy-cr 1 cnt)
	(else)
		(list-bind-args args `(,seq ,cnt) '(:seq :num))
		(errorif `(,cnt <= 0) 'error)
	(endif)

	(vp-push this)
	(call 'list :create :nil `(,lst))
	(call 'seq :get_length `(,seq) `(_ ,len))

	(vp-lea-d cnt len :r0)
	(vp-sub-cr 1 :r0)
	(vp-ext-rr :r0 :r2)
	(vp-div-rrr-u cnt :r2 :r0)
	(call 'list :set_cap `(,lst :r0))

	(vp-cpy-cr 0 idx)
	(loop-while `(,idx < ,len))
		(vp-lea-d idx cnt idx1)
		(vp-min-rr len idx1)
		(call 'seq :slice `(,seq ,idx ,idx1) '(_ slc))
		(call 'list :push_back `(,lst ,slc))
		(vp-add-rr cnt idx)
	(loop-end)
	(vp-pop this)

	(exit 'seq :lisp_partition `(,this ,lst))
	(vp-ret)

(errorcase
(vp-label 'error)
	(jump 'lisp :repl_error `(,this "(partition seq [cnt])" +error_msg_wrong_types ,args))
	(signature '(seq num)))

(def-func-end)
