(include "lib/asm/func.inc")
(include "./class.inc")
(include "././num/class.inc")
(include "././lisp/class.inc")

(def-method 'seq :lisp_pling)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(entry 'seq :lisp_pling '(:r13 :r1))

	(call 'num :create '((:r0 lisp_seq_idx)) '(:r1))

	(exit 'seq :lisp_pling '(:r13 :r1))
	(vp-ret)

(def-func-end)

(def-method 'seq :lisp_each)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this seqs value func args)
		(int dir end)
		(uint old_idx))

	(vp-def (dir idx end func seqs this old_idx) '(:r8 :r9 :r10 :r11 :r12))

	(push-scope)
	(entry 'seq :lisp_each {this, seqs})

(errorcase
	(errorif-lisp-args-sig 'error1 :r1 2 4)
	(assign '((:r1 array_begin)) '(:r1))
	(assign `((:r1 +ptr_size)) '(:r1))
	(errorif-lisp-args-type 'error1 :r1 seq 0))

	(assign {seqs} '(:r1))
	(assign '((:r1 array_length)) '(:r2))
	(assign '(0 -1) `(,idx ,end))
	(vpif '(:r2 = 2))
		(list-bind-args :r1 `(,func ,seqs) '(:obj :list))
	(elseif '(:r2 = 3))
		(list-bind-args :r1 `(,func ,seqs ,idx) '(:obj :list :num))
	(else)
		(list-bind-args :r1 `(,func ,seqs ,idx ,end) '(:obj :list :num :num))
	(endif)
	(call 'obj :ref {this->lisp_sym_nil} {value})

	(call 'list :min_length `(,seqs) '(_ len))
	(vpif `(,len /= +max_int))
		(lisp-elem-index idx len)
		(lisp-elem-index end len)

	(errorcase
		(gotoif `(,idx < 0) 'error2)
		(gotoif `(,end < 0) 'error2)
		(gotoif `(,idx > ,len) 'error2)
		(gotoif `(,end > ,len) 'error2))

		(breakif `(,idx = ,end))
		(vp-cpy-cr 1 dir)
		(vpif `(,idx > ,end))
			(vp-cpy-cr -1 dir)
			(vp-sub-cr 1 idx)
			(vp-sub-cr 1 end)
		(endif)

		(assign {this} `(,this))
		(assign `(,dir ,end ,func ,seqs) {dir, end, func, seqs})
		(assign `((,this lisp_seq_idx)) `(,old_idx))
		(assign `(,idx) `((,this lisp_seq_idx)))
		(assign `(,old_idx) {old_idx})

		(loop-start)
			;discard old value, get new value of function call
			(bind '(_0 _1 _2) (method-input 'lisp :repl_apply))
			(call 'obj :deref {value})
			(call 'list :create :nil {args})
			(call 'list :collect {args, seqs, this->lisp_seq_idx} `(,_1))
			(assign {this, func} `(,_0 ,_2))
			(call 'lisp :repl_apply `(,_0 ,_1 ,_2) {_, value})
			(call 'obj :deref {args})

		(errorcase
			(vp-def (vt1 vt2))
			(assign {value->obj_vtable, this->lisp_error} `(,vt1 ,vt2))
			(breakif `(,vt1 = ,vt2)))

			(assign {this, dir, end} `(,this ,dir ,end))
			(assign `((,this lisp_seq_idx)) `(,idx))
			(vp-add-rr dir idx)
			(assign `(,idx) `((,this lisp_seq_idx)))
		(loop-until `(,idx = ,end))

		(assign {old_idx} {this->lisp_seq_idx})
	(endif)

	(exit 'seq :lisp_each {this, value})
	(return)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(each! lambda seqs [start end])", +error_msg_wrong_types, seqs})
(vp-label 'error2)
	(call 'obj :deref {value})
	(jump 'lisp :repl_error {this, "(each! lambda seqs [start end])", +error_msg_not_valid_index, seqs})
	(signature '(obj list num num)))

	(pop-scope-syms)

(def-func-end)

(def-method 'seq :lisp_some)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this seqs value mode func args)
		(int dir end)
		(uint old_idx))

	(vp-def (dir idx end mode func seqs this value old_idx)
		'(:r8 :r9 :r10 :r11 :r12 :r13))

	(push-scope)
	(entry 'seq :lisp_some {this, seqs})

(errorcase
	(errorif-lisp-args-sig 'error1 :r1 2 5)
	(assign '((:r1 array_begin)) '(:r1))
	(assign `((:r1 +ptr_size)) '(:r1))
	(errorif-lisp-args-type 'error1 :r1 seq 0))

	(assign {seqs} '(:r1))
	(assign '((:r1 array_length)) '(:r2))
	(assign '(0 -1) `(,idx ,end))
	(vpif '(:r2 = 2))
		(list-bind-args :r1 `(,func ,seqs) '(:obj :list))
		(assign {this->lisp_sym_nil} `(,mode))
	(elseif '(:r2 = 3))
		(list-bind-args :r1 `(,func ,seqs ,mode) '(:obj :list :obj))
	(elseif '(:r2 = 4))
		(list-bind-args :r1 `(,func ,seqs ,mode ,idx) '(:obj :list :obj :num))
	(else)
		(list-bind-args :r1 `(,func ,seqs ,mode ,idx ,end) '(:obj :list :obj :num :num))
	(endif)
	(call 'obj :ref `(,mode) {value})

	(call 'list :min_length `(,seqs) '(_ len))
	(vpif `(,len /= +max_int))
		(lisp-elem-index idx len)
		(lisp-elem-index end len)

	(errorcase
		(gotoif `(,idx < 0) 'error2)
		(gotoif `(,end < 0) 'error2)
		(gotoif `(,idx > ,len) 'error2)
		(gotoif `(,end > ,len) 'error2))

		(breakif `(,idx = ,end))
		(vp-cpy-cr 1 dir)
		(vpif `(,idx > ,end))
			(vp-cpy-cr -1 dir)
			(vp-sub-cr 1 idx)
			(vp-sub-cr 1 end)
		(endif)

		(assign {this} `(,this))
		(assign `(,dir ,end ,mode ,func ,seqs) {dir, end, mode, func, seqs})
		(assign `((,this lisp_seq_idx)) `(,old_idx))
		(assign `(,idx) `((,this lisp_seq_idx)))
		(assign `(,old_idx) {old_idx})

		(loop-start 'exit)
			;discard old value, get new value of function call
			(bind '(_0 _1 _2) (method-input 'lisp :repl_apply))
			(call 'obj :deref {value})
			(call 'list :create :nil {args})
			(call 'list :collect {args, seqs, this->lisp_seq_idx} `(,_1))
			(assign {this, func} `(,_0 ,_2))
			(call 'lisp :repl_apply `(,_0 ,_1 ,_2) {_, value})
			(call 'obj :deref {args})

		(errorcase
			(vp-def (vt1 vt2))
			(assign {value->obj_vtable, this->lisp_error} `(,vt1 ,vt2))
			(breakif `(,vt1 = ,vt2)))

			;break out based on mode and new value
			(assign {this, mode, value} `(,this ,mode ,value))
			(assign `((,this lisp_sym_nil)) `(,end))
			(vpif `(,end /= ,mode))
				(breakif `(,end = ,value) 'exit)
			(else)
				(breakif `(,end /= ,value) 'exit)
			(endif)

			(assign `((,this lisp_seq_idx)) `(,idx))
			(assign {dir, end} `(,dir ,end))
			(vp-add-rr dir idx)
			(assign `(,idx) `((,this lisp_seq_idx)))
		(loop-until `(,idx = ,end))

		(assign {old_idx} {this->lisp_seq_idx})
	(endif)

	(exit 'seq :lisp_some {this, value})
	(return)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(some! lambda seqs [mode start end])", +error_msg_wrong_types, seqs})
(vp-label 'error2)
	(call 'obj :deref {value})
	(jump 'lisp :repl_error {this, "(some! lambda seqs [mode start end])", +error_msg_not_valid_index, seqs})
	(signature '(obj list obj num num)))

	(pop-scope-syms)

(def-func-end)

(def-method 'seq :lisp_map)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this seqs value func args out)
		(int dir end)
		(uint old_idx))

	(vp-def (dir idx end func seqs this old_idx) '(:r8 :r9 :r10 :r11 :r12))

	(push-scope)
	(entry 'seq :lisp_map {this, seqs})

(errorcase
	(errorif-lisp-args-sig 'error1 :r1 2 5)
	(assign '((:r1 array_begin)) '(:r1))
	(assign `((:r1 +ptr_size)) '(:r1))
	(errorif-lisp-args-type 'error1 :r1 seq 0))

	(assign {seqs} '(:r1))
	(assign '((:r1 array_length)) '(:r2))
	(assign '(0 -1) `(,idx ,end))
	(vpif '(:r2 = 2))
		(list-bind-args :r1 `(,func ,seqs) '(:obj :list))
		(call 'list :create :nil '(:r0))
	(else)
		(vpif '(:r2 = 3))
			(list-bind-args :r1 `(,func ,seqs :r0) '(:obj :list :list))
		(elseif '(:r2 = 4))
			(list-bind-args :r1 `(,func ,seqs :r0 ,idx) '(:obj :list :list :num))
		(else)
			(list-bind-args :r1 `(,func ,seqs :r0 ,idx ,end) '(:obj :list :list :num :num))
		(endif)
		(class/obj/ref :r0 :r1)
	(endif)
	(assign '(:r0) {out})

	(call 'list :min_length `(,seqs) '(_ len))
	(vpif `(,len /= +max_int))
		(lisp-elem-index idx len)
		(lisp-elem-index end len)

	(errorcase
		(gotoif `(,idx < 0) 'error2)
		(gotoif `(,end < 0) 'error2)
		(gotoif `(,idx > ,len) 'error2)
		(gotoif `(,end > ,len) 'error2))

		(breakif `(,idx = ,end))
		(vp-cpy-cr 1 dir)
		(vpif `(,idx > ,end))
			(vp-cpy-cr -1 dir)
			(vp-sub-cr 1 idx)
			(vp-sub-cr 1 end)
		(endif)

		(assign {this} `(,this))
		(assign `(,dir ,end ,func ,seqs) {dir, end, func, seqs})
		(assign `((,this lisp_seq_idx)) `(,old_idx))
		(assign `(,idx) `((,this lisp_seq_idx)))
		(assign `(,old_idx) {old_idx})

		(assign {out} '(:r0))
		(assign '((:r0 array_length)) '(:r1))
		(vp-cpy-rr end :r2)
		(vp-sub-rr idx :r2)
		(vp-mul-rr dir :r2)
		(vp-add-rr :r2 :r1)
		(call 'list :set_cap '(:r0 :r1))

		(loop-start)
			;get new value of function call
			(bind '(_0 _1 _2) (method-input 'lisp :repl_apply))
			(call 'list :create :nil {args})
			(call 'list :collect {args, seqs, this->lisp_seq_idx} `(,_1))
			(assign {this, func} `(,_0 ,_2))
			(call 'lisp :repl_apply `(,_0 ,_1 ,_2) {_, value})
			(call 'obj :deref {args})

		(errorcase
			(vp-def (vt1 vt2))
			(assign {value->obj_vtable, this->lisp_error} `(,vt1 ,vt2))
			(gotoif `(,vt1 = ,vt2) 'error3))

			;collect value of function call
			(call 'list :push_back {out, value})

			(assign {this, dir, end} `(,this ,dir ,end))
			(assign `((,this lisp_seq_idx)) `(,idx))
			(vp-add-rr dir idx)
			(assign `(,idx) `((,this lisp_seq_idx)))
		(loop-until `(,idx = ,end))

		(assign {old_idx} {this->lisp_seq_idx})
	(endif)

	(exit 'seq :lisp_map {this, out})
	(return)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(map! lambda seqs [out start end])", +error_msg_wrong_types, seqs})
(vp-label 'error2)
	(call 'obj :deref {out})
	(jump 'lisp :repl_error {this, "(map! lambda seqs [out start end])", +error_msg_not_valid_index, seqs})
(vp-label 'error3)
	(call 'obj :deref {out})
	(exit 'seq :lisp_map {this, value})
	(return)
	(signature '(obj list list num num)))

	(pop-scope-syms)

(def-func-end)

(def-method 'seq :lisp_reduce)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this seqs value func args)
		(int dir end)
		(uint old_idx))

	(vp-def (dir idx end func seqs this value old_idx) '(:r8 :r9 :r10 :r11 :r12))

	(push-scope)
	(entry 'seq :lisp_reduce {this, seqs})

(errorcase
	(errorif-lisp-args-sig 'error1 :r1 3 5)
	(assign '((:r1 array_begin)) '(:r1))
	(assign `((:r1 +ptr_size)) '(:r1))
	(errorif-lisp-args-type 'error1 :r1 seq 0))

	(assign {seqs} `(,seqs))
	(assign `((,seqs array_length)) '(:r2))
	(assign '(0 -1) `(,idx ,end))
	(vpif '(:r2 = 3))
		(list-bind-args seqs `(,func ,seqs ,value) '(:obj :list :obj))
	(elseif '(:r2 = 4))
		(list-bind-args seqs `(,func ,seqs ,value ,idx) '(:obj :list :obj :num))
	(else)
		(list-bind-args seqs `(,func ,seqs ,value ,idx ,end) '(:obj :list :obj :num :num))
	(endif)
	(assign `(,value) {value})
	(class/obj/ref value dir)

	(call 'list :min_length `(,seqs) `(,seqs len))
	(vpif `(,len /= +max_int))
		(lisp-elem-index idx len)
		(lisp-elem-index end len)

	(errorcase
		(gotoif `(,idx < 0) 'error2)
		(gotoif `(,end < 0) 'error2)
		(gotoif `(,idx > ,len) 'error2)
		(gotoif `(,end > ,len) 'error2))

		(breakif `(,idx = ,end))
		(vp-cpy-cr 1 dir)
		(vpif `(,idx > ,end))
			(vp-cpy-cr -1 dir)
			(vp-sub-cr 1 idx)
			(vp-sub-cr 1 end)
		(endif)

		(assign {this} `(,this))
		(assign `(,dir ,end ,func ,seqs) {dir, end, func, seqs})
		(assign `((,this lisp_seq_idx)) `(,old_idx))
		(assign `(,idx) `((,this lisp_seq_idx)))
		(assign `(,old_idx) {old_idx})

		(loop-start)
			;recycle value as arg 0, get new value of function call
			(bind '(_0 _1 _2) (method-input 'lisp :repl_apply))
			(bind '(_3 _4 _5) (method-input 'list :collect))
			(call 'list :create :nil {args})
			(call 'list :push_back {args, value} `(,_3 _ _ _))
			(assign {seqs, this->lisp_seq_idx} `(,_4 ,_5))
			(call 'list :collect `(,_3 ,_4 ,_5) `(,_1))
			(assign {this, func} `(,_0 ,_2))
			(call 'lisp :repl_apply `(,_0 ,_1 ,_2) {_, value})
			(call 'obj :deref {args})

		(errorcase
			(vp-def (vt1 vt2))
			(assign {value->obj_vtable, this->lisp_error} `(,vt1 ,vt2))
			(breakif `(,vt1 = ,vt2)))

			(assign {this, dir, end} `(,this ,dir ,end))
			(assign `((,this lisp_seq_idx)) `(,idx))
			(vp-add-rr dir idx)
			(assign `(,idx) `((,this lisp_seq_idx)))
		(loop-until `(,idx = ,end))

		(assign {old_idx} {this->lisp_seq_idx})
	(endif)

	(exit 'seq :lisp_reduce {this, value})
	(return)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(reduce! lambda seqs init [start end])", +error_msg_wrong_types, seqs})
(vp-label 'error2)
	(call 'obj :deref {value})
	(jump 'lisp :repl_error {this, "(reduce! lambda seqs init [start end])", +error_msg_not_valid_index, seqs})
	(signature '(obj list obj num num)))

	(pop-scope-syms)

(def-func-end)

(def-method 'seq :lisp_filter)
	;inputs
	;:r0 = lisp object (ptr)
	;:r1 = args list object (ptr)
	;outputs
	;:r0 = lisp object (ptr)
	;:r1 = return value object (ptr)
	;trashes
	;:r1-:r14

	(def-vars
		(ptr this seq value func args out)
		(int dir end)
		(uint old_idx))

	(vp-def (dir idx end func seq value this old_idx) '(:r8 :r9 :r10 :r11 :r12 :r13))

	(push-scope)
	(entry 'seq :lisp_filter {this, seq})

	(errorif-lisp-args-sig 'error1 :r1 2 5)

	(assign {seq} '(:r1))
	(assign '((:r1 array_length)) '(:r2))
	(assign '(0 -1) `(,idx ,end))
	(vpif '(:r2 = 2))
		(list-bind-args :r1 `(,func ,seq) '(:obj :seq))
		(call 'list :create :nil '(:r0))
	(else)
		(vpif '(:r2 = 3))
			(list-bind-args :r1 `(,func ,seq :r0) '(:obj :seq :list))
		(elseif '(:r2 = 4))
			(list-bind-args :r1 `(,func ,seq :r0 ,idx) '(:obj :seq :list :num))
		(else)
			(list-bind-args :r1 `(,func ,seq :r0 ,idx ,end) '(:obj :seq :list :num :num))
		(endif)
		(class/obj/ref :r0 :r1)
	(endif)
	(assign '(:r0) {out})

	(call 'seq :get_length `(,seq) '(_ len))
	(vpif `(,len /= +max_int))
		(lisp-elem-index idx len)
		(lisp-elem-index end len)

	(errorcase
		(gotoif `(,idx < 0) 'error2)
		(gotoif `(,end < 0) 'error2)
		(gotoif `(,idx > ,len) 'error2)
		(gotoif `(,end > ,len) 'error2))

		(breakif `(,idx = ,end))
		(vp-cpy-cr 1 dir)
		(vpif `(,idx > ,end))
			(vp-cpy-cr -1 dir)
			(vp-sub-cr 1 idx)
			(vp-sub-cr 1 end)
		(endif)

		(assign {this} `(,this))
		(assign `(,dir ,end ,func ,seq) {dir, end, func, seq})
		(assign `((,this lisp_seq_idx)) `(,old_idx))
		(assign `(,idx) `((,this lisp_seq_idx)))
		(assign `(,old_idx) {old_idx})

		(assign {out} '(:r0))
		(assign '((:r0 array_length)) '(:r1))
		(vp-cpy-rr end :r2)
		(vp-sub-rr idx :r2)
		(vp-mul-rr dir :r2)
		(vp-add-rr :r2 :r1)
		(call 'list :set_cap '(:r0 :r1))

		(loop-start)
			;get new value of function call
			(bind '(_0 _1 _2) (method-input 'lisp :repl_apply))
			(bind '(_3 _4) (method-input 'list :push_back))
			(call 'list :create :nil {args})
			(call 'seq :ref_elem {seq, this->lisp_seq_idx} `(_ ,_4))
			(assign {args} `(,_3))
			(call 'list :push_back `(,_3 ,_4) `(,_1 _ _ _))
			(assign {this, func} `(,_0 ,_2))
			(call 'lisp :repl_apply `(,_0 ,_1 ,_2) {_, value})
			(assign {this, value} `(,this ,value))

		(errorcase
			(assign `((,this lisp_error) (,value obj_vtable)) `(,func ,seq))
			(gotoif `(,func = ,seq) 'error3))

			;collect or ignore item
			(assign `((,this lisp_sym_nil)) `(,seq))
			(vpif `(,value /= ,seq))
				(call 'list :pop_back {args} `(_ ,_4))
				(assign {out} `(,_3))
				(call 'list :push_back `(,_3 ,_4))
			(endif)
			(call 'obj :deref `(,value))
			(call 'obj :deref {args})

			(assign {this, dir, end} `(,this ,dir ,end))
			(assign `((,this lisp_seq_idx)) `(,idx))
			(vp-add-rr dir idx)
			(assign `(,idx) `((,this lisp_seq_idx)))
		(loop-until `(,idx = ,end))

		(assign {old_idx} {this->lisp_seq_idx})
	(endif)

	(exit 'seq :lisp_filter {this, out})
	(return)

(errorcase
(vp-label 'error1)
	(jump 'lisp :repl_error {this, "(filter! lambda seq [out start end])", +error_msg_wrong_types, seq})
(vp-label 'error2)
	(call 'obj :deref {out})
	(jump 'lisp :repl_error {this, "(filter! lambda seq [out start end])", +error_msg_not_valid_index, seq})
(vp-label 'error3)
	(call 'obj :deref {args})
	(call 'obj :deref {out})
	(exit 'seq :lisp_filter {this, value})
	(return)
	(signature '(obj seq list num num)))

	(pop-scope-syms)

(def-func-end)
